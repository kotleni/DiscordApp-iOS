//
//  Message.swift
//  DiscordApp
//
//  Created by Victor Varenik on 19.03.2023.
//

import Foundation

// ref: https://discord.com/developers/docs/resources/channel#message-object
// types: https://discord.com/developers/docs/resources/channel#message-object-message-types
class DiscordMessage: Codable, Equatable {
    let id: String                              // ID, unique for channel
    let channelId: String                        // ID of channel
    let author: DiscordUser                            // author of this message (not guaranteed a valid user, see below)
    let content: String                         // contents of the message
    let timestamp: String                       // when this message was sent (ISO8601)
    let editedTimestamp: String?               // when this message was edited (ISO8601) (or null if never)
    let isTts: Bool                               // whether this was a TTS message
    let mentionsEveryone: Bool                  // whether this message mentions everyone
    let mentions: [DiscordUser]                        // users specifically mentioned in the message
    // let mention_roles: [Role]                // roles specifically mentioned in this message
    // let mention_channels: [ChannelMention]   // channels specifically mentioned in this message
    let attachments: [DiscordAttachment]               // any attached files
    // let embeds: [Embed]                      // any embedded content
    // let reactions: [Reaction]                // reactions to the message
    let nonce: String?                          // used for validating a message was sent (need be random)
    let isPinned: Bool                            // whether this message is pinned
    let webhookId: String?                     // webhook ID (only is generated by webhook)
    let type: Int                               // type of message
    // let activity: MessageActivity?           // sent with Rich Presence-related chat embeds
    // let application: Application?            // sent with Rich Presence-related chat embeds
    let applicationId: String?                 // user application ID (only is interaction or in-app wehbook)
    // let message_reference: MessageReference? // data showing the source of a crosspost, channel follow add, pin, or reply message
    let flags: Int?                             // message flags combined as a bitfield
    // let referenced_message: Message?         // message associated with the message_reference
    // let interaction: MessageInteraction?     // sent if the message is a response to an Interaction
    let thread: DiscordChannel?                        // thread that was started from this message
    // let components: [Xxxx]                   // components, like buttons/actions/other
    // let sticker_items: [MessageStickerItem]? // message contains stickers
    let position: Int?                          // message position in thread
    // let role_subscription_data: RoleSubscriptionData // see ref

    static func == (lhs: DiscordMessage, rhs: DiscordMessage) -> Bool {
        lhs.id == rhs.id
    }

    enum CodingKeys: String, CodingKey {
        case id
        case channelId = "channel_id"
        case author
        case content
        case timestamp
        case editedTimestamp = "edited_timestamp"
        case isTts = "tts"
        case mentionsEveryone = "mention_everyone"
        case mentions
        case attachments
        case nonce
        case isPinned = "pinned"
        case webhookId = "webhook_id"
        case type
        case applicationId = "application_id"
        case flags
        case thread
        case position
    }
}
